// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Expense analysis AI agent.
 *
 * - analyzeExpenseReport - A function that handles the expense analysis process.
 * - AnalyzeExpenseReportInput - The input type for the analyzeExpenseReport function.
 * - AnalyzeExpenseReportOutput - The return type for the analyzeExpenseReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeExpenseReportInputSchema = z.object({
  expenseReport: z.string().describe('The expense report data as text.'),
});
export type AnalyzeExpenseReportInput = z.infer<typeof AnalyzeExpenseReportInputSchema>;

const AnalyzeExpenseReportOutputSchema = z.object({
  summary: z.string().describe('A summary of the expense report analysis.'),
  opportunities: z
    .array(z.string())
    .describe('A list of potential expense reduction opportunities.'),
  recommendations: z
    .array(z.string())
    .describe('Specific recommendations for reducing expenses.'),
});
export type AnalyzeExpenseReportOutput = z.infer<typeof AnalyzeExpenseReportOutputSchema>;

export async function analyzeExpenseReport(
  input: AnalyzeExpenseReportInput
): Promise<AnalyzeExpenseReportOutput> {
  return analyzeExpenseReportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeExpenseReportPrompt',
  input: {schema: AnalyzeExpenseReportInputSchema},
  output: {schema: AnalyzeExpenseReportOutputSchema},
  prompt: `You are a financial analyst specializing in identifying expense reduction opportunities for businesses. Analyze the provided expense report and suggest potential areas for cost savings.  Expense Report: {{expenseReport}}  Provide a summary of your analysis, a list of potential expense reduction opportunities, and specific recommendations.  Format the opportunities and recommendations as bullet points. `,
});

const analyzeExpenseReportFlow = ai.defineFlow(
  {
    name: 'analyzeExpenseReportFlow',
    inputSchema: AnalyzeExpenseReportInputSchema,
    outputSchema: AnalyzeExpenseReportOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
