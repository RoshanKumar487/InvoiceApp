
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the expected companyId for the authenticated user
    function userCompanyId() {
      return "fb-default-company-" + request.auth.uid.substring(0,5);
    }

    // Company Profiles: Only the authenticated user associated with that companyId can manage it.
    // The companyId is the document ID.
    match /companyProfiles/{companyIdDoc} {
      allow read, write: if request.auth != null && companyIdDoc == userCompanyId();
    }

    // Revenue Entries: Users can manage entries associated with their companyId.
    match /revenueEntries/{entryId} {
      allow get: if request.auth != null && resource.data.companyId == userCompanyId();
      allow list: if request.auth != null && request.query.filters.size() > 0 && request.query.filters[0].field == "companyId" && request.query.filters[0].value == userCompanyId();
      allow create: if request.auth != null && request.resource.data.companyId == userCompanyId();
      allow update: if request.auth != null && resource.data.companyId == userCompanyId() && request.resource.data.companyId == resource.data.companyId;
      allow delete: if request.auth != null && resource.data.companyId == userCompanyId();
    }

    // Expenses: Users can manage entries associated with their companyId.
    match /expenses/{expenseId} {
      allow get: if request.auth != null && resource.data.companyId == userCompanyId();
      allow list: if request.auth != null && request.query.filters.size() > 0 && request.query.filters[0].field == "companyId" && request.query.filters[0].value == userCompanyId();
      allow create: if request.auth != null && request.resource.data.companyId == userCompanyId();
      allow update: if request.auth != null && resource.data.companyId == userCompanyId() && request.resource.data.companyId == resource.data.companyId;
      allow delete: if request.auth != null && resource.data.companyId == userCompanyId();
    }

    // Appointments: Users can manage entries associated with their companyId.
    match /appointments/{appointmentId} {
      allow get: if request.auth != null && resource.data.companyId == userCompanyId();
      allow list: if request.auth != null && request.query.filters.size() > 0 && request.query.filters[0].field == "companyId" && request.query.filters[0].value == userCompanyId();
      allow create: if request.auth != null && request.resource.data.companyId == userCompanyId();
      allow update: if request.auth != null && resource.data.companyId == userCompanyId() && request.resource.data.companyId == resource.data.companyId;
      allow delete: if request.auth != null && resource.data.companyId == userCompanyId();
    }

    // Invoices: Users can manage entries associated with their companyId.
    match /invoices/{invoiceId} {
      allow get: if request.auth != null && resource.data.companyId == userCompanyId();
      allow list: if request.auth != null && request.query.filters.size() > 0 && request.query.filters[0].field == "companyId" && request.query.filters[0].value == userCompanyId();
      allow create: if request.auth != null && request.resource.data.companyId == userCompanyId();
      allow update: if request.auth != null && resource.data.companyId == userCompanyId() && request.resource.data.companyId == resource.data.companyId;
      allow delete: if request.auth != null && resource.data.companyId == userCompanyId();
    }

    // Employees: Users can manage entries associated with their companyId.
    match /employees/{employeeId} {
      allow get: if request.auth != null && resource.data.companyId == userCompanyId();
      // Allow list if querying by companyId matching the user's companyId
      allow list: if request.auth != null &&
                     request.query.filters.size() > 0 &&
                     request.query.filters[0].field == "companyId" &&
                     request.query.filters[0].value == userCompanyId();
      allow create: if request.auth != null &&
                       request.resource.data.companyId == userCompanyId();
      allow update: if request.auth != null &&
                       resource.data.companyId == userCompanyId() &&
                       request.resource.data.companyId == resource.data.companyId; // Prevent changing companyId
      allow delete: if request.auth != null &&
                       resource.data.companyId == userCompanyId();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
